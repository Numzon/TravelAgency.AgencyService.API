// <auto-generated />
using System;
using AgencyService.Adapter.SQLServer.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgencyService.Adapter.SQLServer.Migrations
{
    [DbContext(typeof(AgencyServiceDbContext))]
    [Migration("20240507080841_Manager_user_id_fix")]
    partial class Manager_user_id_fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.BankAccountData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Swift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankAccountData");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TravelAgencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("TravelAgencyId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelAgencyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TravelAgencyId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.ManagerReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TravelAgencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TravelAgencyId");

                    b.ToTable("ManagerReport");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.TravelAgencyAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankAccountDataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountDataId")
                        .IsUnique()
                        .HasFilter("[BankAccountDataId] IS NOT NULL");

                    b.ToTable("TravelAgencyAccount");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.Comment", b =>
                {
                    b.HasOne("AgencyService.Core.Domain.Entities.Manager", "Manager")
                        .WithMany("Comments")
                        .HasForeignKey("ManagerId");

                    b.HasOne("AgencyService.Core.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Subcomments")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("AgencyService.Core.Domain.Entities.TravelAgencyAccount", "TravelAgency")
                        .WithMany("Comments")
                        .HasForeignKey("TravelAgencyId");

                    b.Navigation("Manager");

                    b.Navigation("ParentComment");

                    b.Navigation("TravelAgency");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.Manager", b =>
                {
                    b.HasOne("AgencyService.Core.Domain.Entities.TravelAgencyAccount", "TravelAgency")
                        .WithMany("Managers")
                        .HasForeignKey("TravelAgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AgencyService.Core.Domain.ValueObjects.PersonalData", "PersonalData", b1 =>
                        {
                            b1.Property<int>("ManagerId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Group")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ManagerId");

                            b1.ToTable("Manager");

                            b1.WithOwner()
                                .HasForeignKey("ManagerId");
                        });

                    b.Navigation("PersonalData")
                        .IsRequired();

                    b.Navigation("TravelAgency");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.ManagerReport", b =>
                {
                    b.HasOne("AgencyService.Core.Domain.Entities.Manager", "Manager")
                        .WithMany("Reports")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgencyService.Core.Domain.Entities.TravelAgencyAccount", "TravelAgency")
                        .WithMany("Reports")
                        .HasForeignKey("TravelAgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("TravelAgency");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.TravelAgencyAccount", b =>
                {
                    b.HasOne("AgencyService.Core.Domain.Entities.BankAccountData", "BankAccountData")
                        .WithOne("TravelAgency")
                        .HasForeignKey("AgencyService.Core.Domain.Entities.TravelAgencyAccount", "BankAccountDataId");

                    b.OwnsOne("AgencyService.Core.Domain.ValueObjects.CompanyData", "CompanyData", b1 =>
                        {
                            b1.Property<int>("TravelAgencyAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("AgencyName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TravelAgencyAccountId");

                            b1.ToTable("TravelAgencyAccount");

                            b1.WithOwner()
                                .HasForeignKey("TravelAgencyAccountId");
                        });

                    b.Navigation("BankAccountData");

                    b.Navigation("CompanyData")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.BankAccountData", b =>
                {
                    b.Navigation("TravelAgency")
                        .IsRequired();
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Subcomments");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.Manager", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("AgencyService.Core.Domain.Entities.TravelAgencyAccount", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Managers");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
